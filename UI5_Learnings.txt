//////////////  Big Unsolved Mysteries  ////////////

    -  How do I access and use an external, 3rd party database?
    -  How do I get an app up and live on the Web?
    -  How do I handle logins?
    -  

    ///// Solved /////

        Q:  How do I run and write UI5 apps on my computer, in VS Code, and not on SAP's web IDE?
        
            A:  Not 100% sure about the details, but running it on a local server allows you to run the app properly.  


    //////////////////


////////////////////////////////////////////////////


Five Rules of a Fiori Interface:

1:  Role-based.  On the screen, you should only see options relevant to who you are.  Should use your terminology, be adapted for who you are and how you work.  
2: Adaptive.  Works across all platforms from a single code base, and adapts to multiple use cases.

3:  Coherent.  It should have a consistent look, feel, and functionality internally, and also across different platforms.

4:  Simple.  Include only what is necessary.  

5:  Delightful.  Violates expectations in a positive way.


--


--- Making a new page (extending the application?)

1.  Start by making the basics with the app template.  In Eclipse that is New > Other... > UI5 >  application template.  Then follow the dropdowns.  This creates the correct folder structure.  


--- Setting up the Model in MVC --

// this is your data source, usually an off-world database.
const oData = {}

// AFAICT this creates a new Model object.
const oModel = new sap.ui.model.json.JSONModel()

// this maps your data to the Model. 
oModel.setData(oData)

// After this, you also have to map UI5 components to the appropriate data.

------


Open questions:

-How exactly does scope work in UI5?

-Are all views created when the script in index.js is run?  Then it just shows you whichever one you have navigated to?  


Java FX Gluon has a really good MVC explanation.  

OK!  Just solved a tough problem and I think this one will come up again!  So I ran my code and got an error, something to the effect of: 

 sap.ui.layout.form.SimpleForm is not a constructor

 I checked my syntax and found that it was indeed a constructor.  Then, after some google-fu, what I found was that I only had one library on the index.html page.  I had:

 data-sap-ui-libs="sap.m"

 So the error was correct!  There was no function constructor named SimpleForm because the only library I had loaded was   sap.m    library.  Once I loaded other libraries:

data-sap-ui-libs="sap.m,sap.ui.commons,sap.ui.layout,sap.ui.table"

everything worked just fine!

Creating a new style:

    1.  Using the Chrome developer tools, identify the HTML elements you want to change.  You can see what the changes to that element look like by adding new CSS properties in the element.style{} object.  Be warned that it can take some trial and error to get the right element and to adjust the right property.  You can use   !important   tag to get this to take precedence over any parents or shared classes, but not sure if this is best practice?

    Sometimes, when you try to change a CSS property in the Chrome developer tools, your cursor will jump.  The way the instructor handled it is:
        a. Go back to the original element you had selected.  Ctrl + C the name.
        b. In the Style section, create a new 


    2.  Once you know what changes you want to make, copy the CSS properties into a new, blank document.  Write down where they came from.  Make a folder in the WebContent folder (customarily called    css   ) and save your new document as a .css file in this new folder.  Apparently   custom.css   is the traditional name.

    3.  Grab the path to the   css   folder you just created.  In your index.html file, before your first <script> tag, add a link to your css.  For example, above would look like:  

    <link rel="stylesheet" type="text/css" href="css/custom.css">  

    That's how you tell the HTML where to look for the stylesheet.

    4.  In your .view.js file for the page you are working on, go to the function constructors that actually produce the particular element whose style you are trying to change.  After the constuctor, call the addStyleClass("xxx") method.  "xxx" is whatever name you're going to give to call it in the CSS.  For example, a button would look like this:

    const btn = new sap.m.Button("btn", {}).addStyleClass("btnCss");

    Calling this method will make   btn   have the class of "btnCss" when it is rendered in the HTML.

    5.  Copy the class name, then paste it into the .css file.  Don't forget to prefix the name with   .   since it is a class.  Cut all the properties you created in Chrome and paste them into the {}.  Anything with the class of "btnCss" (which your button object will, because you assigned that class with .addStyleClass() in the .view) will now have these properties.  Example:

    .btnCss{
    padding-left: 30% !important;
    width: 60% !important;
    }

    6.  Occasionally, you'll need to change the style of a sub-element, one that you don't have a direct constructor for.  If that is the case, find a unique class on the sub-element (in this case,  .sapMBtnInner  ) and use a > to point there from the parent element with a class you did create.

    .btnCss>.sapMBtnInner{
    background: aquamarine !important;
    }

    Then apply your style like normal!

    

If a CSS style is greyed out in Chrome Developer Tools, there is another rule with higher priority driving that property.  How is priority assigned?  No idea.






///////////////   SAP SDK Classes and Tutorials    ////////////////////

-- data-sap-ui-oninit
    this is an attribute of the <script> tag in the index.html document.  Here's what I know so far. for my hi_world document, the attribute looks like this:  data-sap-ui-oninit="module:sap/ui/demo/walkthrough/index"  and I don't know why.  

    A few things I do know.  This is a JS file that contains the application logic for starting up the app.  This is  apparently more secure than running the same logic in script tags as part of the HTML file (which is what Harrison does)  I do know that the file name (index.js) has to correspond with the last section of the path (  /index  ) because I changed them both to   cat   and it still worked.  What I don't understand is the path, because the .js file is part of my webapp, but that path points to nowhere.  What gives?

-- src
    AFAICT, it's fine to use a link to the library that SAP hosts for development, but I think for production you want to download the library and have it in a    resources   folder as part of your app.  


-- UIcomponent and .init
    This definition will probably get revised a lot.  AFAICT (1 APR) when a new component is created, it is automatically initialized (i.e. the .init() method is called. )  It seems you also have to make a call to the parent class (the un-extended UIcomponent class to get this to work)  Black box this and move on.

-- Manifest.json 
    Manifest.json is a JSON object that contains all the global application settings.  This separates application code from settings, although I am not sure why this is good.

-- XML Fragments 
    XML fragments are like mini-XML views, but they do NOT have their own controller.  Usually, they are instead controlled by whatever View they are inserted into.  They are located in the Core namespace (Why, and why is that good? )

-- Factory Functions:
    A factory function is any function that returns an object.  However, constructor functions and classes (i.e. constructor functions with syntactic sugar) are more specific TYPES of factory functions, so you should always say 'constructor' instead of 'factory' if you are talking about the former.  It's like how it would be weird to say you own a 'mammal' instead of a 'dog'.

-- Manifest.json:
    AFAICT the files listed in the manifest.json folder are all links to named data files, they are instantiated and loaded as named models, and they are accessible throughout the entire app.  Could be really useful.

    I had an issue where I kept getting a 'No Data' error in my list table.  It turns out that the reason was because I didn't have the 

--CORS:  
    Ok, this thing has been hurting me repeatedly, so let me start marking     down solutions.  One of the problems I found is when I have a mismatched    namespace.  In one of my .js files I was calling a view at viewName:        "sap.ui.demo.db.view.App".  However, I hadn't yet defined the name of the resource root in the index.html file.  When I added in                          data-sap-ui-resourceroots='{"sap.ui.demo.db": "./"}' 
    the problem went away.  Basically, the JS file was trying to use a namespace I hadn't yet defined.

--Hooks
    AFAICT, hooks are a particular set of named methods that are called automatically by the UI5 core when certain events occur.  If they are empty, everything runs as normal.  But if we put functions in them, those functions will be run when that particular event occurs.  onInit() is a perfect example of this.  Any operations defined on the onInit() method will be run when a view is instantiated and its controls are already created.


-- Components vs. ???  
    Components are used when you expect to be sharing the thing you are creating across different apps.  If you're just going to be re-using something within a single app, there are easier approaches (what are they?  TBD)

-- Hash-based URLs - 
    in a hash-based URL, you'll have a /#/ element somewhere in your URL.  AFAICT, anything after the /#/ sign is handled on the client side, not the server side.  An added benefit of this is that the app never has to re-load during navigation.

-- Helper Method:  
    A helper method is used to perform a particular repetitive task common across multiple classes. This keeps us from repeating the same piece of code in multiple places.

--Routing:

        routes: 3 main properties:

            name:  The name of the route (functions a lot like an ID in HTML) It is a shorthand description of the route, and MUST be unique in your routing instance (AFAICT this just means don't re-use names in the same app)

            pattern:  Not sure, but AFAICT this corresponds to the hash part of the URL.  In other words, whatever you specify for your name will appear after the /#/ in your URL.

            target: this must match the name of a named object within the "targets" object of the manifest.json file.  It is possible to load multiple targets at the same time, so this is often an array.

        targets:  Defines the view that a particular route will display.  Each      object within the   targets{} object should have a unique name, and 
            AFAICT that name should match the name given to the   target:  property in the corresponding   routes   object.

            viewName:  Determines which view will be displayed when the corresponding route is requested.  AFAICT this is the only mandatory property for a given target object. 

            There are a bunch of other properties that can be defined in each child of the targets object, but not going to get into them now.

    Routing - One of the new things I learned is that with routing, your Home page is different from your app page.  Last time, I didn't make these separate, and I think that's why it didn't work. The app page (I called it Main, should probably just call it App in the future)  AFACT the app page itself is just empty.  The Home page is what you navigate to if your URL string is otherwise empty (i.e. localhost:port/webapp/ )  




    OPEN QUESTIONS:

How do I access a remote database?
How do I make it so that users can log in to an application?
x-----  How do I adjust the style-sheet/css of a UI5 app?  
What is the manifest.json file and why is it so important?

Why are fragments part of the Core namespace, and not part of the MVC namespace?

what is a helper class?

///////  CSS and Stylesheets   ///////

-I think I've identified something useful.  Within a flex box, the "Align Items" property determines the vertical placement of the box's contents.  If you choose "Baseline" they will all touch the top.  "End" puts them all at the end, and "Center" puts them at the center.

Meanwhile, there's a second property called 

Now here's where it gets weird. In a VBox, it seems to be switched.  The "Align Items" property controls the HORIZONTAL position of the elements within.  


Data Types - different from formatters, it seems they allow 2-way binding and could be useful for my index approach?  https://help.sap.com/doc/saphelp_uiaddon10/1.17/en-US/91/f37e746f4d1014b6dd926db0e91070/content.htm?no_cache=true


///////  UI5 UI development open questions.  ///////

-How do I make my own components and then insert them into other components?  Like if I want to re-use a login screen or something?

-How do I do routing through UI5?

-How to do logins?

-getBindingContext() - how is it used, what are the benefits?

-What is the best way to align view elements, especially ones in different components?

-How do I change the style of type?

-How do I change the global styles for a document?

