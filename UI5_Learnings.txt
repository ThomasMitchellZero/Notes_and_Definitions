//////////////  Conceptual Open Questions  ////////////

    -   How do I access and use an external, 3rd party database?
    -   How do I get an app up and live on the Web?
    -   How do I handle logins?
    -   How exactly does scope work in UI5?
        -   How do I do routing through UI5?
        -   What are the rules and syntax for data-binding?
    -   What is 'destroy'?  What do I use it on, and why should I?
        -   What is the manifest.json file and why is it so important?
    -   What is the purpose of the top-level Component.js file and how does it      relate to the index.html file?
    -   How exactly do I go about using modules?
    -   How do I attach a common controller to a fragment?
    -   How should I use the debugger with UI5?
    -   How do I use factory functions?
    -   What's a good, ironclad system for figuring out what "this" points to?
    -   How do I do security and accounts?



/////////  Solved Conceptual Open Questions   ////////////


//////////////  Specific Open Questions  ///////////////

    -Are all views created when the script in index.js is run?  Then it just shows you whichever one you have navigated to?  

    -How do I make my own components and then insert them into other components?  Like if I want to re-use a login screen or something?

    -getBindingContext() - how is it used, what are the benefits?

    -What is the best way to align view elements, especially ones in different components?

    -How do I change the style of type?

    -How do I change the global styles for a document?

    -what is the difference between a layout and a floorplan?  (floorplan does not refer to a literal floor plan.  It's some sort of design structure for an application.)

    - What are the advantages of fragments vs. views?  When should I use a fragment instead of a view?  

///// Solved /////

        Q:  How do I run and write UI5 apps on my computer, in VS Code, and not on SAP's web IDE?
        
            A:  Not 100% sure about the details, but running it on a local server allows you to run the app properly.  
        
        Q:  How do I adjust the style-sheet/css of a UI5 app?  ?

            A:  In the manifest.json file, ythere is an object called "resources".  Make (or add to) the property CSS with an array containing objects.  Each object contains a URI path.  These are paths to your CSS file or files.  In the CSS file, just do CSS like normal.


/////////////// Solved Errors //////////////////////

    OK!  Just solved a tough problem and I think this one will come up again!  So I ran my code and got an error, something to the effect of: 

    sap.ui.layout.form.SimpleForm is not a constructor

    I checked my syntax and found that it was indeed a constructor.  Then, after some google-fu, what I found was that I only had one library on the index.html page.  I had:

    data-sap-ui-libs="sap.m"

    So the error was correct!  There was no function constructor named SimpleForm because the only library I had loaded was   sap.m library.  Once I loaded other libraries:

    data-sap-ui-libs="sap.m,sap.ui.commons,sap.ui.layout,sap.ui.table"

    everything worked just fine!


///// GENERAL ///////

--Layout Vs. floorplan vs. framework
    AFAICT these are not actual controls, but design patterns for how to structure an app that are well-supported by the framework.  It seems that frameworks contain layouts which contain floorplans.
    
    -Layout
        AFAICT, a layout is a general design for how you arrange a whole page.  Examples are things like Dynamic Page (Shell, header, content, footer) and Flexible Column (displays multiple floorplans on a single page, and you can have up to 3 columns)

    -Floorplan
        More specific than a layout, floorplans appear to be how you structure the contents of a layout.  They're recommended design patterns for things like a worklist, a page with information about an object, or a wizard.  

    -Framework
        Not to be confused with frameworks like UI5 or React, in the Fiori context a framework is (AFAICT) a recommended visual structure based on a particular use case.  It's a specific combination of layout and floorplan to meet a particular, common need.  One example is an app that allows analysis of data by drilling down and viewing KPIs from a data model.

    



--Support Popup:
    Ctrl + Alt + Shift + S brings up the UI5 support popup.  Not really sure how to use this thing, but it appears to contain a mountain of useful information.  I believe this is provided by the UI5 plugin so I need to make sure I have that installed.  


////// Creating a new app from a starter template ///////////////

     The way I want this to work is to be cable to copy a template app and list EVERY change I have to make to set it up to run on its own.



    I have now discovered that there is an easy way to change the app.  

        -Copy the ProjNamePlaceholder folder and rename it.

        -Open the very top-level folder - the UI5_Apps folder (not the actual application folder) in VS Code.  If you don't do this, you can still do the following ops on the webapp folder, but you'll have to change all the files in the application folder by hand.

        -Right-click the folder of the newly-named app.  There's an option called Find in Folder.  Click it.

        -Enter ProjNamePlaceholder in the Search box.  It will bring up every instance where that name is used in the code.  Below it is a box called Replace.  Fill that with whatever you named this new folder.  Then, click the Replace All button next to the Replace input field.  That will replace every instance of the old name in EVERY file in the app folder with the new name.

        -Do the same thing but with NamespacePlaceholder and whatever you want your new namespace to be.  Congrats!  All vestiges of the old app should be cleared away and the new app should be ready to go.

        -Don't try to do them both at the same time.  The reason is that some paths are separated with  /   and some have  .  between nodes.  Doing it as two searches gets every pair, and also any singletons that might be floating around.
        



        



/////// STYLE ///////



Java FX Gluon has a really good MVC explanation.  



Creating a new style:

    1.  Using the Chrome developer tools, identify the HTML elements you want to change.  You can see what the changes to that element look like by adding new CSS properties in the element.style{} object.  Be warned that it can take some trial and error to get the right element and to adjust the right property.  You can use   !important   tag to get this to take precedence over any parents or shared classes, but not sure if this is best practice?

    Sometimes, when you try to change a CSS property in the Chrome developer tools, your cursor will jump.  The way the instructor handled it is:
        a. Go back to the original element you had selected.  Ctrl + C the name.
        b. In the Style section, create a new 


    2.  Once you know what changes you want to make, copy the CSS properties into a new, blank document.  Write down where they came from.  Make a folder in the WebContent folder (customarily called    css   ) and save your new document as a .css file in this new folder.  Apparently   custom.css   is the traditional name.

    3.  Grab the path to the   css   folder you just created.  In your index.html file, before your first <script> tag, add a link to your css.  For example, above would look like:  

    <link rel="stylesheet" type="text/css" href="css/custom.css">  

    That's how you tell the HTML where to look for the stylesheet.

    4.  In your .view.js file for the page you are working on, go to the function constructors that actually produce the particular element whose style you are trying to change.  After the constuctor, call the addStyleClass("xxx") method.  "xxx" is whatever name you're going to give to call it in the CSS.  For example, a button would look like this:

    const btn = new sap.m.Button("btn", {}).addStyleClass("btnCss");

    Calling this method will make   btn   have the class of "btnCss" when it is rendered in the HTML.

    5.  Copy the class name, then paste it into the .css file.  Don't forget to prefix the name with   .   since it is a class. (for an ID, the prefex is #)Cut all the properties you created in Chrome and paste them into the {}.  Anything with the class of "btnCss" (which your button object will, because you assigned that class with .addStyleClass() in the .view) will now have these properties.  Example:

    .btnCss{
    padding-left: 30% !important;
    width: 60% !important;
    }

    6.  Occasionally, you'll need to change the style of a sub-element, one that you don't have a direct constructor for.  If that is the case, find a unique class on the sub-element (in this case,  .sapMBtnInner  ) and use a > to point there from the parent element with a class you did create.

    .btnCss>.sapMBtnInner{
    background: aquamarine !important;
    }

    Then apply your style like normal!

    

If a CSS style is greyed out in Chrome Developer Tools, there is another rule with higher priority driving that property.  How is priority assigned?  No idea.






///////////////   SAP SDK Classes and Tutorials    ////////////////////

-- data-sap-ui-oninit
    this is an attribute of the <script> tag in the index.html document.  Here's what I know so far. for my hi_world document, the attribute looks like this:  data-sap-ui-oninit="module:sap/ui/demo/walkthrough/index"  and I don't know why.  

    A few things I do know.  This is a JS file that contains the application logic for starting up the app.  This is  apparently more secure than running the same logic in script tags as part of the HTML file (which is what Harrison does)  I do know that the file name (index.js) has to correspond with the last section of the path (  /index  ) because I changed them both to   cat   and it still worked.  What I don't understand is the path, because the .js file is part of my webapp, but that path points to nowhere.  What gives?

-- src
    AFAICT, it's fine to use a link to the library that SAP hosts for development, but I think for production you want to download the library and have it in a    resources   folder as part of your app.  


-- UIcomponent and .init
    This definition will probably get revised a lot.  AFAICT (1 APR) when a new component is created, it is automatically initialized (i.e. the .init() method is called. )  It seems you also have to make a call to the parent class (the un-extended UIcomponent class to get this to work)  Black box this and move on.

-- Manifest.json 
    Manifest.json is a JSON object that contains all the global application settings.  This separates application code from settings, although I am not sure why this is good.

-- neo-app.json
    I think what this does is to provide a list of route 'translations'.  So for instance, when you are developing in webIDE, your app has no actual /resources folder containing the UI5 libraries.  The neo-app.json file tells your application "Hey, when you get X URL, look for it at Y location instead.

-- XML Fragments 
    XML fragments are like mini-XML views, but they do NOT have their own controller.  They are instead controlled by the controller of whatever View they are inserted into.  

    Fragments can use data-binding, although you should probably also use element binding to make sure that their data is in the correct context.  

    AFAICT you can have fragments use a controller, but it has to be the controller of the parent view.  You can map a method to a button that is in a fragment, but that button DOES NOT have a universal function.  Instead, it will run whatever function has that name in the controller of whatever view into which the fragment is inserted.  If you want it to run the same function in every location it is used, don't use a fragment.  Use a nested view.  

    So it looks like the determining factor is:  Does this element contain interactive controls that need to do the same thing every time they are triggered?  If so, use a nested view.  If not, a fragment is preferred because it is lighter than a view (no controller file)

    There is one other use case for fragments.  Not exactly sure of the specifics, but I believe it has to do with IDs.  IIRC a nested view should not be used more than once within a parent view because if the nested view contains any IDs, the IDs will be duplicate and cause an error.  In this case, you use a fragment.  If you want the functionality to be the same in every instance (like what you get with a nested view), AFAICT what you do is create a module containing the method you want, load that module into the parent view's controller (just like you load an SAP library, except your path is namespace/folder/modulename.js)  
    
    Then in your controller, you create a method (with a name that matches whatever method name you've programmed the fragment control to call, because the fragment will be trying to call a method with that name EVERY time it is activated) and then calls the actual method you want from your module.  It seems like a long, convoluted chain but doing it this way ensures that if you need to change something, you can do it once in the module and then have that change automatically propagated to the everywhere in the rest of your application.

    The relevance of this is not immediately apparent, but at runtime, there is no evidence of a fragment inside of the DOM.  In other words, if you use developer tools to check the elements, you will ONLY see the contents of the fragment in the DOM hierarchy.  There will be zero indication that they came from a fragment rather than being hard-coded in place.  

-- Lazy Loading

    Lazy loading means that you only load a particular view or data when it is required by the user.  This is usually done by creating an XML view or fragment that will be lazily loaded, and then using the parent view's controller (JavaScript code) to place it in the DOM in response to some event, like a button press.

-- Factory Functions:
    A factory function is any function that returns an object.  However, constructor functions and classes (i.e. constructor functions with syntactic sugar) are more specific TYPES of factory functions, so you should always say 'constructor' instead of 'factory' if you are talking about the former.  It's like how it would be weird to say you own a 'mammal' instead of a 'dog'.

-- Manifest.json:
    AFAICT the files listed in the manifest.json folder are all links to named data files, they are instantiated and loaded as named models, and they are accessible throughout the enntire app.  Could be really useful.

    I had an issue where I kept getting a 'No Data' error in my list table.  It turns out that the reason was because I didn't have the 

--CORS:  
    Ok, this thing has been hurting me repeatedly, so let me start marking     down solutions.  One of the problems I found is when I have a mismatched    namespace.  In one of my .js files I was calling a view at viewName:        "sap.ui.demo.db.view.App".  However, I hadn't yet defined the name of the resource root in the index.html file.  When I added in                          data-sap-ui-resourceroots='{"sap.ui.demo.db": "./"}' 
    the problem went away.  Basically, the JS file was trying to use a namespace I hadn't yet defined.

--Hooks
    AFAICT, hooks are a particular set of named methods that are called automatically by the UI5 core when certain events occur.  If they are empty, everything runs as normal.  But if we put functions in them, those functions will be run when that particular event occurs.  onInit() is a perfect example of this.  Any operations defined on the onInit() method will be run when a view is instantiated and its controls are already created.


-- Components vs. ???  
    Components are used when you expect to be sharing the thing you are creating across different apps.  If you're just going to be re-using something within a single app, there are easier approaches (what are they?  TBD)

-- Hash-based URLs - 
    in a hash-based URL, you'll have a /#/ element somewhere in your URL.  AFAICT, anything after the /#/ sign is handled on the client side, not the server side.  An added benefit of this is that the app never has to re-load during navigation.

-- Helper Method:  
    A helper method is used to perform a particular repetitive task common across multiple classes. This keeps us from repeating the same piece of code in multiple places.  (What is the best place to define a helper method? Is it as a JS module, or by extending the base Controller?  No idea)

-- Private Method:
    AFAICT, in UI5 'private method' doesn't have any functional description - i.e. they work the same as any other method.  It's just a designation that goes to show that a method is ONLY ever called within one particular controller.  Private methods are designated with an underscore in front, like:

    _privateMethod: function(){}

    If the method is used outside the controller, such as a method that is called by a click in the view, it should be classified as a public method, not a private one.  However, it seems that public methods CAN call private methods.  The main differentiator appears to be the source of the call.

-- Expression binding
    Instead of "{/fixedProperty}", you can do "{= ${Price} > 500 ? 'Error' : 'Success'}"  It's called an expression binding because you're binding it to a the result of a function expression (i.e. writing an anonymous function)

-- Formatters:

    Example of the relevant properties within the tags of the XML control:

    parts: [
            {path: 'WeightUnit'},
            {path: 'WeightMeasure'}
        ],
    formatter : '.formatter.delivery'

    Formatters run more complicated operations than expression binding.  In the XML file, you include a couple extra properties in your control.  I think another facet of formatters is that they should involve bound data (otherwise couldn't you just use a function?)
    
    The first is   parts   , where  you pass an array of the arguments you are going to pass to your formatter.  These can (and actually should be) bound data.  The array items MUST be in the order that corresponds with the parameters of the formatter, becase that is the order they will be passed in.

    The second is the formatter, where you link to the actual function you will be running.  How do you determine this link?  Read on!

    Well, I best practice is to make a single file called formatter.js in the model (not the control) folder.  The formatter.js file is a module that returns an object full of ALL the formatting methods you will use in your app.  

    Then, in the controller of the view in which you wish to use the formatter, you include it in the array of the sap.ui.define() function like any external library, except your route is namespace/model/formatter.  

    in the Controller.extend object you will be returning, you define formatter:formatter,

    Now it is available to be called like any other method you would define in the controller.  To use the one you want in the XML view, just method-chain formatter + the name of the formatting method you want to use:

    formatter : '.formatter.delivery'

--Data Types:

    Good post here:  
    https://blogs.sap.com/2016/09/16/custom-data-types-in-sapui5/

    Newer description:  

    Data types (including custom data types) allow the user to parse, validate, and format data automatically.  Each of these operations can be done by using custom methods in the controller, but if you are going to do any of  those mutations in more than one controller, you're violating DRY.  Honestly, any time when you have to do any of these three operations, consider using a custom data type.
    
    You extend the SimpleType class, and overwrite methods for the three hooks below.  They are: 

    parseValue(sExternalValue):
        takes an external value (like a user input) and mutates it into a specific format.  i: "1234"   o:1234
    
    validateValue(sInternalValue):
        checks to make sure the internal value generated by parseValue() meets conditions specified by the data type's programmer.  If not, you should program it to throw an exception.  AFAICT this is to ensure that invalid data can't be stored in the model.

        (i).type === "integer" ? "valid" : "invalid"

    formatValue(sInternalValue):
        takes the internal value generated by validateValue, and prettifies it. Anything you would do with the formatter method you can do with this.

    The other great thing about custom types is how they relate to data binding.  Remember, data-binding allows you to specify a type as a parameter.  (gotta use complex binding, but still).  I could be wrong, but I THINK the InternalValue is what gets stored in the model.  i.e. after it's been validated, it gets stored.  It also gets stored as its specificed, type, so the app always knows how to pack and unpack it.  It's like a universal machine that standardizes inputs and pretties up outputs. THAT IS FUCKING COOL.  

    Example:

        <ObjectListItem
            title="{Name}"
            number="{
                parts: [
                    {path: 'Price'},
                    {path: 'CurrencyCode'}
                ],
                type: 'sap.ui.model.type.Currency',
                formatOptions: {
                    showMeasure: false
                }
            }"

    Here's what's happening.  We're filling in the parameters expected by the 
    ObjectListItem control.  One of those parameters is 'number'.  Now, we could pass it a simple binding, but instead we are going to change its type on the fly.  "Currency" is a specific UI5 datatype, just like a string or integer.  It needs both a number and a currency.  So we tell the model we're making it into a currency with:
    
    type: 'sap.ui.model.type.Currency'

    And formatOptions is (I think) the first parameter accepted by the currency constructor.  That, at least, is in the SDK (oFormatOptions > NumberFormat, and it's listed in there).  But how am I supposed to know that it accepts a price and a currency code, and in what order?  One new tidbit - I think if you see a ? after a parameter, that means the parameter is optional (at least in the UI5 SDK)



--Routing:

        

        routes: 3 main properties:

            name:  The name of the route (functions a lot like an ID in HTML) It is a shorthand description of the route, and MUST be unique in your routing instance (AFAICT this just means don't re-use names in the same app)

            pattern:  Not sure, but AFAICT this corresponds to the hash part of the URL.  In other words, whatever you specify for your name will appear after the /#/ in your URL.

            target: this must match the name of a named object within the "targets" object of the manifest.json file.  It is possible to load multiple targets at the same time, so this is often an array.

        targets:  Defines the view that a particular route will display.  Each      object within the   targets{} object should have a unique name, and 
            AFAICT that name should match the name given to the   target:  property in the corresponding   routes   object.

            viewName:  Determines which view will be displayed when the corresponding route is requested.  AFAICT this is the only mandatory property for a given target object. 

            There are a bunch of other properties that can be defined in each child of the targets object, but not going to get into them now.

    Routing - One of the new things I learned is that with routing, your Home page is different from your app page.  Last time, I didn't make these separate, and I think that's one reason the routing didn't work. The app page (I called it Main, should probably just call it App in the future)  AFAICT the app page itself is just empty.  The Home page is what you navigate to if your URL string is otherwise empty (i.e. localhost:port/webapp/ )  


-- oData 
    Stands for Open Data Protocol (not Object Data!)  Short version is: oData is one specific set of protocols for handling data.  All SAP apps are designed to use oData, but it is an open-source protocol used by many other application types.  Apparently oData makes it easy for non-SAP clients to communicate with SAP servers.

    -HTTP is stateless. (TCP is stateful) That means that once the server responds to a request from a client, it does not remember anything about the request.  It fires and forgets.

    -URI and URL are not the same thing.  URL is a subset of URI.  Good description here:
    https://blogs.sap.com/wp-content/uploads/2016/02/002_883023.jpg

    -https://blogs.sap.com/2016/02/08/odata-everything-that-you-need-to-know-part-2/ 


    * How to use:  
        - I already have the Northwind oData destination set up and configured.

        - Next, I need to add another route to the neo-app.json file.  Not sure exactly how neo-app works, but current understanding is that it is some sort of intermediary that allows WebIDE to use external resources without CORS errors (and I only know what about half the words in that sentence actually mean.)

        -So what goes in the "routes" array of the neo-app.json file looks something like:

        {
            "path": "/destinations/northwind",
            "target": {
                "type": "destination",
                "name": "northwind"
            },
            "description": "Northwind OData Service"
        }

--Filtering

    Before you can filter OData, you have to check the metadata.  A particular item, such as:

    <Property Name="Name" Type="Edm.String" Nullable="false" MaxLength="255" sap:label="Product Name" sap:sortable="false" sap:filterable="false"/>

    has property  sap:filterable  set to "false".

//////// Data-Binding  ////////

    -One thing I think I have learned today - don't be shy about doing things that affect the view in the controller file, not just the view.  AFAICT it gives you more options.  Previously, I was averse to this because I thought it was bad practice - not maintaining separation of concerns.  However, I think the way I'm currently doing binding ( name="{/somepath}" ) is actually MORE of a violation of SoC because you're performing logic (data-binding) in the view.  Now, I'm still going to do it that way because it's generally neat and easy, but I shouldn't feel bad about doing certain operations in the controller.

    --Simple binding 
        Where you just specify the path to the data property you want to bind to:  

        <Input value="{/firstName}"/>
    
    --Complex binding 
        It's where you bind additional properties to your control property (in addition to your path to the property) 
        
        <Input
            value="{
                path:'/company/name', 
                mode: 'sap.ui.model.BindingMode.OneWay' 
            }"
        />  

    --Composite binding 
        It is a type of complex binding where one or more of the additional properties you are binding are additional binding paths.  If a single control property needs to reference more than one model value (i.e. a price that needs to display both a number and a currency) then this is what you use.




    --Expression Binding:
        What is Expression binding?
        When should I be using it?
        Expression binding means xxxxxxxxxx.  To use expression binding, use normal data-binding syntax, but make the first character in the brackets as an = sign. So:

        numberState-"{= xxxxxxx}"

    --Binding Types:

        -Property Binding:
            Binds some property of a control (i.e. the pre-made gizmos in the UI5 library) to some specific element of a data model.  So like:

            <Input
                value="{/company/name}"
            />

        -Context (or Element) Binding:
            - Basically, this allows you to set a model object as the context for a control.  That means, for instance, you could narrow the control's scope from the entire model to just one field.  AFAICT 'context' just means what part of the model the control can see.  Any binding done on the children will be relative to that context.  

            So you get:

            binding="{/company}"
            value="{name}"
            tooltip="The name of the company is '{name}'"

            Instead of:

            value="{/company/name}"
		    tooltip="The name of the company is '{/company/name}'}"

            In the simplest use, this saves some typing.  What appears to be the more valuable use is if I want to display values of a specific of properties, but I don't know in advance which PARENT element I'll be getting those properties from.  A good example would be a list from which I want to display some details.  

            In the view:

                    <Input id="companyInput"
                        value="{name}"/>	

            And in the controller:
            
                var oInput = this.byId("companyInput");
                oInput.bindElement("/companies/0");

            It seems you will frequently be using the bindElement() method in the controller for element binding operations.  

        -Aggregation Binding (List Binding):

            Q: Is list binding just a looping application of context binding?


    -- Syntax:

        /   anything that starts with a slash is an absolute binding path.          AFAICT this means it will be resolved to that specific binding path     NO MATTER what the binding context is.

            anything that doesn't start with a slash is a relative binding path which just means it is resolved relative to its binding context.  I this means that you don't necessarily have to specify every node in a path.  You can just go "modelName>nestedTarget" instead of "modelName>xxx/yyy/nestedTarget.

        >   At some point you have to specify which model to get the data           from.  This character goes after the data model.  It isn't used         anywhere else in data binding.

        ={}  This is how you indicate an expression.  Expressions are just           simple functions that calculate values directly in the view,           rather than some outside function.

        ${} This is what you wrap around a binding path WITHIN an expression.       It will automatically format what it finds in the binding path          according to the target type expected by the control property you       are populating. (I think this is the more popular option)

        %{} Same as above, but no formatting.  Whatever it gets, it passes          along unchanged.




        




///////  CSS and Stylesheets   ///////

-I think I've identified something useful.  Within a flex box, the "Align Items" property determines the vertical placement of the box's contents.  If you choose "Baseline" they will all touch the top.  "End" puts them all at the end, and "Center" puts them at the center.

Meanwhile, there's a second property called 

Now here's where it gets weird. In a VBox, it seems to be switched.  The "Align Items" property controls the HORIZONTAL position of the elements within.  







