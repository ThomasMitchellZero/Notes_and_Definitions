  Open Questions:

    -  Is OData the only external data source that allows true two-way data binding?  https://sapui5.hana.ondemand.com/#/topic/68b9644a253741e8a4b9e4279a35c247

    -How am I supposed to make an API that is compatible with OData standards?
      -Do I need hosting?
      -What are the standards I need to comply with?
    
    -OData allows me to make part or all of a DB available.  What do I have to do to make an existing database OData-compliant?
  
    
    -In what situations should I be using OData?  If I want my application to draw from a persistant database (i.e. not a local JSON object that doesn't change from session to session) is this my best option?

    -What is the purpose of navigation properties?  In what situations should I use them?  

    -What is an Association?  It seems to be related to Navigation properties, but how?  

    -What is an Entity Data Model?  How does it relate to OData?



    -Terminology:
      -OData-compliant data - OData?
      -Odata-compliant API - OData service?
      -entity data model - 


/////////  Answered Questions ///////////////////

    Q: Is this a useful thing for me to be spending time on?  
    A: Yes.  Specifically, learning how to produce and expose OData is not the most important thing, but knowing how to consume it will be really important in your career.  You should be able to look at a metadata document and have a pretty good idea of what data and fields you are looking at.  


//////////////  OData Learnings  /////////



http://www.beginners-sap.com/what-is-odata/ 

https://blogs.sap.com/2016/03/01/odata-everything-that-you-need-to-know-part-7/


-TCP/IP
  -HTTP
    -Client/Server model
      -API
        -RESTful API
          -OData?

--HTTP
  
  -when using a browser, the concept of 'navigating' a 'site' is kind of a misnomer.  When you type in a URI, you are just requesting a file or files from a server.  You are getting back a data that your browser then unpacks into the website on your screen.  It's not like a TV where if the signal cuts out your screen goes dead.  If the server goes down, you won't even notice until you try to navigate (i.e. request more information)

  - GET, POST, PUT, and DELETE are HTTP verbs.  They are part of the standard HTTP protocol, and are not specific to RESTful APIs.  

  - Just now realized one of the cool things about websites.  URLs can be called directly (by typing it into the address bar) but they can also be called indirectly, by things like hitting buttons.  In fact, AFAICT EVERY change you experience on a website is a combination of HTTP verb and of URL.  You must know one URL to get to a website (the web address) but the response from the server can contain lots of different URLs that you don't have to know (hidden inside of buttons and such)  That means you really only have to know one URL and from there you can access all the others.

-- API 

  -API is essentially a program that says "Server!  When you get X request, send Y response."  Your request is generally specified by your route (aka your URL) The response is usually data in the form of XML or JSON.  APIs are unique from regular websites in that they generally do not have a frontend (HTML, CSS, etc)  
  
  -The API is not the database or even the server.  It is the code that governs the access point(s) for the server.  'Access point' in this context just means that you will send pre-determined data in response to a pre-determined request.

  -Here's the use case an API automates.  Suppose I want a list of Twitter tweets with the hashtag #littyville.  I could email Twitter and ask for the list, but then I would have to wait for a human response, convert the response into a format useable by my application, and keep emailing because the list would quickly be out of date.  APIs automate that entire process.  

  -In order to build an API, you need the following:
    - A backend with routing of some sort.
    - A database where your application can store its data.  This could be a database server you are running (like MySQL) or a Backend as a Service DB, like Mongo DB Stitch
    -A server that is accessible to the internet on which your backend is running.  Usually this will be a cloud server like AWS or Azure.
  
  -To expose a resource simply means that your application will respond with that resource to a particular request.

  


-- REST

  -a RESTful API transers data via the HTTP rules, but it follows additional rules as well.  

  -a RESTful API is stateless.  Each request from client to server must contain ALL information required for the server to understand the request.  (xxx would be good if I could generate an example that does and an example that doesn't meet this requirement)

  -A REST resource is just something provided by a server that follows the REST   protocol rules.

  -A Representation is the form in which that resource is delivered.  A representation is NOT the data it is based on - it is a clone, and the original may be packaged in a different way since the OData standard only supports JSON and XML (i.e. a CSV file converted to JSON).  For example, the same resource could be represented in JSON as:

    {
    "id": 1,
    "firstName": "John",
    "lastName": "Doe",
    "email": "john.doe@example.com"
    } 

  while in XML it would be:
    <user>
      <id>1</id>
      <firstName>John</firstName>
      <lastName>Doe</lastName>
      <email>john.doe@example.com</email>
    </user>

  Another benefit of using representations goes back to the main purpose of OData - to be a set of universal protocols for sending and receiving data.  For instance, a SQL database is obviously not JSON, but by representing it in JSON format, it can be shared and consumed by any application.  The application does not even need to know how the original data was stored.  All it needs is the REPRESENTATION of the data that's exposed by the OData service.

  AFAICT a client can specify the representation it wants to receive as part of the header in the server request.  So for instance, when performing a GET to the URL /app/users/1, you'll add the HTTP header Accept with the application/json value to tell the server the representation that you will accept.  Clients can interact with representations, but they can never interact directly with resources.  There are many client-side libraries that exist to represent a variety of data types into ATOM or JSON formats for use in OData.

  -Prior to REST, websites used SOAP (Simple Object Access Protocol)  AFAICT the difference is that with SOAP, you use XML to make a request, and you need different XML for every request you want to make.  With REST, your request is (nearly?) ALWAYS just an HTTP verb and a URL.  

-- OData

  “OData is short for Open Data Protocol and it is an open-source protocol to allow the creation and consumption of queryable and interoperable RESTful APIs in a simple and standard way.”  That is the official definition.  Once I understand what that means, I will understand OData. 

  -URI and URL are not the same thing.  URL is a subset of URI.  Good description here:
    https://blogs.sap.com/wp-content/uploads/2016/02/002_883023.jpg

    -https://blogs.sap.com/2016/02/08/odata-everything-that-you-need-to-know-part-2/ 
  
  SAP has adopted OData to make SAP data (and databases?) accessible to and operable by non-SAP systems. It is not owned by SAP, and it was actually created by Microsoft.  OData is open-source and owned by no one.

  OData resources are exposed (made available?) in two formats - JSON and ATOM (which is a specific variant of XML)

  AFAICT there are a variety of libraries out there that convert other data formats into the OData format.  

  Here's an example of the problem OData exists to solve:  Right now, data is stored all over the web in different, incompatible formats.  It's easy to translate data from one format to another, but to ensure interoperability, everyone needs to be translating TO a single common standard.  OData is that single common standard.  


////////////  OData Terminology Comparison   ///////////////////

Table terminology with OData equivalent:

  RELATION DATABASE       ODATA DATA SERVICE        ODATA PROTOCOL
  -Database               -Entity Container         -Service/workspace?
  -Table                  -Entity set               -Collection/feed
  -Row                    -Entity                   -Entry
  -Column                 -Property                 -Property


  -- OData resource: anything in the model that can has an address.  Could be as small as a property, or as large as an entity set.  Resources are often made up of other resources.  An entity set is going to be made up of entities, and those entities are going to each have individual properties.  

  --Entities are usually typed (Person, product, etc.)  Current understanding is that EntityType is like a class, in the sense that it's a defined collection of named properties that any given entity is expected to have.  

  -- Navigation properties are how you represent relationships from one entity to another.  AFACT, you use this when one resource includes another resource.  

  xxx One thing I am noticing is that a lot of these Entity Types contain duplicate data.  I also know that in databases, there should be a single source of truth.  I assume Navigation properties are some way of dealing with this - instead of duplicating the data, you just point to the original source.

  xxx Another oddity - there is a second schema in which all the EntitySet resources have plural names - and also the type EntitySet, which is not found anywhere in the first schema.  So maybe the first schema is defining the 'classes' (like 'Product'), and the second schema contains the actual tables (like 'Products' where everything with a particular 'class' is displayed?  

  But then there must be some way of determining which table actually holds the unique data?

  --What does it mean when an EntityType has multiple keys?

  --How do the Entity Sets know which entities to display?

  --How exactly does linking one EntityType to another work?

  --Most of the EntityTypes have a Key, which I think is its unique identifier.  But some have multiple keys?  Let me venture a guess here.  This is in a situation where one entity in a set (like an Order) might contain multiple resources (like different Products)  So if you want to see a detail, the unique identifier would be the OrderID, and then the specifc ProductID you are looking at from within that order?  



https://services.odata.org/V3/Northwind/Northwind.svc/$metadata
https://services.odata.org/V3/Northwind/Northwind.svc/Products
https://services.odata.org/V3/Northwind/Northwind.svc/


  --19 OCT - Some more info about metadata.  It seems that for a properly-made OData service, the metadata can ALWAYS be accessed by adding $metadata after the last   /  character in the URL.  

  Another thing I've learned about the metadata is that it seems to describe the contents of the database, but doesn't include any actual data.  I think it's like - here's a table and a row with sample columns, but no data in the columns.  Also, still not sure what this means but I believe the metadata describes important things about the DB (field names, methods, properties, etc.) without needing the actual data.

  AFACT the Service Document is just a lower-res version of the metadata document.  It just lists the collections (tables), while the metadata document describes the tables, plus what columns those tables contain, and the attributes (XML equivalent of properties, and not to be confused with OData properties, which are like columns) of those columns.  AFAICT, Service document also only displays Entity Sets, not Entity Types.

  In the service data (aka the low-res description) document, if you add $metadata after the URL you will be taken to the metadata document.  If you add the href of one of the collections after the URL, AFACIT you will see the actual data in your browser, although it is minified and thus pretty much illegible to a human reader.  



////////////  Consuming Existing OData in UI5  ///////////////////


  NEW, NOT EXPLORED YET: Claims to be a deep dive into OData:

  https://developers.sap.com/mission.scp-3-odata.html



    - Steps before you can consume existing OData:

      1.  You add a destination from the SAP Cloud Platform 

        -Click on the Home icon in Web IDE.  
        -In the Helpful Links box, click on SAP Cloud Platform Cockpit link
        -In the menu bar on the right, click on Destinations (inside the Connectivity header)
        -Click the New Destination button
        -Fill out the boxes. AFAICT Name and URL are the important ones.  The URL should NOT be the full URL AFAICT.  I think you want as close to the root URL as possible.  You will provide more specific URL information in a later step.
        -Once it is created, hit the Check Connection button to make sure it's working.  You should get an HTTP response of 200 if it is working correctly.



      2.  Add an object to the neo-app.json file containing the relevant information about the data you just added.  Looks like this:

        	{
            "path": "/destinations/ES5",
            "target": {
              "type": "destination",
              "name": "ES5"
              },
            "description": "ES5 Demo Service"
          }

      Translated into English, I think this means "When the router gets the URL of /destinations/ES5, instead of routing to that literal URL, instead look for a destination named "ES5" among the destinations we've configured for UI5.   (AFAICT this configuration is in the Cockpit of the Hana Cloud Platform, and is NOT part of the UI5 code)  Also, I believe you can choose the value of the "path" property to be whatever you want.  I don't think this has to be copied from anywhere.
      

      3.  In the manifest.json file, first you add a "dataSources" object to the    sap.app     object.  For our example, it looks like this:

        "dataSources": {
          "ES5": {
            "uri": "/destinations/ES5/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/",
            "type": "OData",
            "settings": {
              "odataVersion": "2.0"
            }
          }
        }

        -Not currently sure how to tell which version your OData is using.

        -The most important property is the URI property.  We get the value from the OData service provider.  Remember, we configured a destination named "ES5" with a URL of https://sapes5.sapdevcenter.com.  We then configured a path in our neo-app.json file where "ES5" corresponds to the route of /destinations/ES5. 
        
        SO, to get the URL we want to set as the URI property, it's:
        
        (neo-app path) 
        + (whole URL - the root URL we configured in the Cloud Platform Cockpit)
        
        So:  

        neo-app path is: 
        /destinations/ES5

        The whole URL is:
        https://sapes5.sapdevcenter.com/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/

        And the part of the URL we already configured with Cloud Platform is:
        https://sapes5.sapdevcenter.com

        So we replace the Cloud Platform bit with the neo-app path and we get:
        "/destinations/ES5/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/"

        
        So when the app goes to get the OData, it will replace the /destinations/ES5 section with https://sapes5.sapdevcenter.com and that will lead to the full URL of: 

        "https://sapes5.sapdevcenter.com/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/"

        WOW!  And when you go to that URL, you get a page full of XML data which I don't know what do with, but I do know is the expected output of an OData service.  SWEEEEEEEEET!  One other thing I noticed.  IIRC, an OData service provides a metadata page in addition to the actual data object.  But this link appears to ONLY show the metadata file.  Not sure how to see the actual data.  Do you need to?
        
        So why do all of this?  Not sure about the ins and outs, but I know that this sidesteps CORS errors.  And if I get CORS errors in the future, I might want to come back to the neo-app.json file because I think I now know how to use it.

      4.  Back to the manifest.json file.  If you want to have this model accessible throughout the app as a named model (AFAICT you would always want this) then you have to do something else.  In the "models" object of the "sap.ui5" object (right by your "i18n" model) you create a new named object.  
      
      Choose a name for your model, like "productData" or something.  

          "ProductData" : {"dataSource": "ES5"}
      
      If you want the model to be the default model, just call it "" (an empty string) The "dataSource": "ES5" property corresponds to the name of the object in dataSources.  AFAICT, this makes it the default model for the application.  


    -- Northwind
      When setting up the destination in the Cloud Platform Cockpit, I found that checking the connection on different subsets of the URL resulted in different responses.

      https://services.odata.org/V2/Northwind/Northwind.svc/
      "501: Not Implemented"

      https://services.odata.org/V2/Northwind/
      "403: Forbidden"

      https://services.odata.org/V2/
      "200: OK"

    -- A description of what all the parts of consuming OData are doing.  (fill this in)

      -Cloud Platform Destinations:
        This is the actual root of the URL of the server you want to get OData from.  AFACIT you don't have to go all the way down to the root - you could put the direct URL of the OData service here if you wanted - but it is good practice because you don't have to configure a separate destination for every OData entity set you want to consume from the same server.  You just use the neo-app prefix and then concatenate it with the specific part of the URL that corresponds to the entity set you want.

          /neo-app/prefix/ + entity set  A URL
          /neo-app/prefix/ + entity set  B URL
          /neo-app/prefix/ + entity set  C URL

      -neo-app.json
        This is where we actually define our prefixes.  I'm not sure exactly how this works, but AFAICT it has something to do with not violating CORS in the WebIDE.

        There's a detailed explanation above, but the objects in this file make the connection between configured destinations in the Cloud platform and the paths (or 'prefixes') designated in this file.  The important thing is that the target.name property matches a configured property in the Cloud Platform.
    
        AFAICT this plus the Cloud Platform takes the place of a proxy server.

      -manifest.json

        -dataSources
          I think this is where the call that will be made to an external server is actually defined.  In the dataSources object, we have the URL to the specific entity set (via prefix + specific URL)

        -models
          AFAICT this is where the data is actually turned into a model.  I believe the actual OData is cloned on the client side and then turned into a model.  If I delete the models, the empty app still runs just fine.  

          I also think that this is where the call to the OData server is actually made.  If I mess up both URLs and delete one model, 
      
      

-- OData service
  One new thing I've learned is that the metadata file does not contain the actual data, but it does contain data about the data.  For instance:

  <Property Name="Name" Type="Edm.String" Nullable="false" MaxLength="255" sap:label="Product Name" sap:sortable="false" sap:filterable="false"/>

  The sap:sortable and sap:filterable properties are both set to false.  That means that I can't use these to sort or filter data.  



    






//////////// My Original Questions  ///////////////////////

oData is a specific type of REST architecture.  All OData is REST, but not all REST is OData

-OData is a data-transfer technique 

- You can have an OData model.  You can also apparently have an OData service.  

-OData is a protocol, a set of rules and procedures in the same way that JSON is a protocol. 

  -Can you have an OData file?

    -Not sure, but you CAN have an OData model.  It's one of the four model types supported by UI5.  

 

-OData is not a database, and OData services are not database hosting services. 

    -Is the purpose of OData services to turn static database files into OData files that can then be turned into data models?



        -What exactly is an OData service doing, then?  Why do they have URLS and such?

 

-Turning something into an OData 