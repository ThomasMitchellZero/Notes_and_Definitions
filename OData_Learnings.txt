http://www.beginners-sap.com/what-is-odata/ 

https://blogs.sap.com/2016/02/08/odata-everything-that-you-need-to-know-part-1/

-TCP/IP
  -HTTP
    -Client/Server model
      -API
        -RESTful API
          -OData?

--HTTP
  
  -when using a browser, the concept of 'navigating' a 'site' is kind of a misnomer.  When you type in a URI, you are just requesting a file or files from a server.  You are getting back a data that your browser then unpacks into the website on your screen.  It's not like a TV where if the signal cuts out your screen goes dead.  If the server goes down, you won't even notice until you try to navigate (i.e. request more information)

  - GET, POST, PUT, and DELETE are HTTP verbs.  They are part of the standard HTTP protocol, and are not specific to RESTful APIs.  

  - Just now realized one of the cool things about websites.  URLs can be called directly (by typing it into the address bar) but they can also be called indirectly, by things like hitting buttons.  In fact, AFAICT EVERY change you experience on a website is a combination of HTTP verb and of URL.  You must know one URL to get to a website (the web address) but the response from the server can contain lots of different URLs that you don't have to know (hidden inside of buttons and such)  That means you really only have to know one URL and from there you can access all the others.

-- API 

  -API is essentially a program that says "Server!  When you get X request, send Y response."  Your request is generally specified by your route (aka your URL) The response is usually data in the form of XML or JSON.  APIs are unique from regular websites in that they generally do not have a frontend (HTML, CSS, etc)  
  
  -The API is not the database or even the server.  It is the code that governs the access point(s) for the server.  'Access point' in this context just means that you will send pre-determined data in response to a pre-determined request.

  -Here's the use case an API automates.  Suppose I want a list of Twitter tweets with the hashtag #littyville.  I could email Twitter and ask for the list, but then I would have to wait for a human response, convert the response into a format useable by my application, and keep emailing because the list would quickly be out of date.  APIs automate that entire process.  

  -In order to build an API, you need the following:
    - A backend with routing of some sort.
    - A database where your application can store its data.  This could be a database server you are running (like MySQL) or a Backend as a Service DB, like Mongo DB Stitch
    -A server that is accessible to the internet on which your backend is running.  Usually this will be a cloud server like AWS or Azure.
  
  -To expose a resource simply means that your application will respond with that resource to a particular request.

  


-- REST

  -a RESTful API transers data via the HTTP rules, but it follows additional rules as well.  

  -a RESTful API is stateless.  Each request from client to server must contain ALL information required for the server to understand the request.  (xxx would be good if I could generate an example that does and an example that doesn't meet this requirement)

  -A REST resource is just something provided by a server that follows the REST   protocol rules.

  -A Representation is the form in which that resource is delivered.  A representation is NOT the data it is based on - it is a clone, and it may be packaged in a different way since the OData standard only supports JSON and XML (i.e. a CSV file converted to JSON).  For example, the same resource could be represented in JSON as:

    {
    "id": 1,
    "firstName": "John",
    "lastName": "Doe",
    "email": "john.doe@example.com"
    } 

  while in XML it would be:
    <user>
      <id>1</id>
      <firstName>John</firstName>
      <lastName>Doe</lastName>
      <email>john.doe@example.com</email>
    </user>

  AFAICT a client can specify the representation it wants to receive as part of the header in the server request.  So for instance, when performing a GET to the URL /app/users/1, you'll add the HTTP header Accept with the application/json value to tell the server the representation the client accepts.  Clients can interact with representations, but they can never interact directly with resources.

  -Prior to REST, websites used SOAP (Simple Object Access Protocol)  AFAICT the difference is that with SOAP, you use XML to make a request, and you need different XML for every request you want to make.  With REST, your request is (nearly?) ALWAYS just an HTTP verb and a URL.  

-- OData

  “OData is short for Open Data Protocol and it is an open-source protocol to allow the creation and consumption of queryable and interoperable RESTful APIs in a simple and standard way.”  That is the official definition.  Once I understand what that means, I will understand OData. 
  
  SAP has adopted OData to make SAP data (and databases?) accessible to and operable by non-SAP systems. It is not owned by SAP, and it was actually created by Microsoft.  OData is open-source and owned by no one.

  OData resources are exposed (made available?) in two formats - JSON and ATOM (which is a specific variant of XML)

  AFAICT there are a variety of libraries out there that convert other data formats into the OData format.  

  Here's an example of the problem OData exists to solve:  Right now, data is stored all over the web in different, incompatible formats.  It's easy to translate data from one format to another, but to ensure interoperability, everyone needs to be translating TO a single common standard.  OData is that single common standard.  

  Open Questions:
    -How am I supposed to make an API that is compatible with OData standards?
      -Do I need hosting?
      -What are the standards I need to comply with?
    
    -OData allows me to make part or all of a DB available.  What do I have to do to make an existing database OData-compliant?
    
    -Is this a useful thing for me to be spending time on?  
      -Is it important to know how to consume OData?
      -Is it important to know how to produce OData?
    
    -In what situations should I be using OData?  If I want my application to draw from a persistant database (i.e. not a local JSON object that doesn't change from session to session) is this my best option?

    -Terminology:
      -OData-compliant data - OData?
      -Odata-compliant API - OData service?


////////////  Consuming Existing OData in UI5  ///////////////////

    - How this works AFAICT

      1.  You add a destination from the SAP Cloud Platform (not sure how to do this without an example)

      2.  Add an object to the neo-app.json file containing the relevant information about the data you just added.  Looks like this:

        	{
            "path": "/destinations/ES5",
            "target": {
              "type": "destination",
              "name": "ES5"
              },
            "description": "ES5 Demo Service"
          }

      Translated into English, I think this means "When the router gets the URL of /destinations/ES5, instead of routing to that literal URL, instead look for a destination named "ES5" among the destinations we've configured for UI5  
      

      3.  In the manifest.json file, first you add a "destinations" object to the sap.app object.  The most important thing is the URI property.  For now, just know that this something that is set by the OData service creator.     For our example, it looks like this:

        "dataSources": {
          "ES5": {
            "uri": "/destinations/ES5/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/",
            "type": "OData",
            "settings": {
              "odataVersion": "2.0"
            }
          }
        }

        Remember, we configured a destination named "ES5" with a URL of https://sapes5.sapdevcenter.com.  We then configured a path in our neo-app.json file where "ES5" corresponds to the route of /destinations/ES5. SO, to get the URL we want to use for the manifest.json file, it's (neo-app path) + (specific URL) So:  

        "/destinations/ES5/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/"

        actually leads to a URL of: 

        "https://sapes5.sapdevcenter.com/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/"

        WOW!  And when you go to that URL, you get a page full of XML data which I don't know what do with, but I do know is the expected output of an OData service.  SWEEEEEEEEET!  So why do all of this?  Not sure about the ins and outs, but I know that this sidesteps CORS errors.  And if I get CORS errors in the future, I might want to come back to the neo-app.json file because I think I now know how to use it.

        Back to the manifest.json file.  You also add it to the model object.  In this example, the model is unnamed, or "".  The "dataSource": "ES5" property corresponds to the name of the object in dataSources.  AFAICT, this makes it the default model for the application.  

          "" : {"dataSource": "ES5"}


    - First step 
      is to configure the destination to the OData service in the application settings.  This is done by creating and adapting a Cloud Connectivity configuration of the application which is defined in the neo-app.json file.  (I don't know what any of this means)  

      neo-app.json contains project settings for WebIDE.  I don't think it is used outside of WebIDE, but not sure.  

        > in Web IDE, right-click the project, select New, and select HTML5 Application Descriptor.  This creates the neo-app.json file.  From here, you add in a new destination object.  

  


    






//////////// My Original Questions  ///////////////////////

oData is a specific type of REST architecture.  All OData is REST, but not all REST is OData

-OData is a data-transfer technique 

- You can have an OData model.  You can also apparently have an OData service.  

-OData is a protocol, a set of rules and procedures in the same way that JSON is a protocol. 

  -Can you have an OData file?

    -Not sure, but you CAN have an OData model.  It's one of the four model types supported by UI5.  

 

-OData is not a database, and OData services are not database hosting services. 

    -Is the purpose of OData services to turn static database files into OData files that can then be turned into data models?



        -What exactly is an OData service doing, then?  Why do they have URLS and such?

 

-Turning something into an OData 