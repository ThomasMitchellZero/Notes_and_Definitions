You're lost, nothing makes sense, and the sheer volume of things you don't understand feels overwhelming?
Good!
That is what it feels like when you are learning something new.  It means your mind is in unexplored territory, and this feeling is mandatory.  There is no path to understanding that does not lead through this wilderness of bewilderment.  
Think about Solidworks and how opaque it seemed at first.  What even is Sketch Mode?  Hell, think of Fusion.  Even after you already knew Solidworks, which was at least 90% similar, the structure and conventions of Fusion were still baffling.  And yet now you can just whip up models in them without even thinking about the tool.  Familiarity requires time, and with that time, you will make connections and build understanding.  By all means, make attempts to understand.  You'll have to form and test mental models to create your own intuitive understanding.  But don't be alarmed if it doesn't make sense.  That's just normal for learning.  It doesn't mean you are too dumb, and it doesn't mean it will always be this confusing.  Keep swimming and trust the process.
Don't be intimidated by jargon.  Everyone sounds terribly smart when they are using words they understand and you do not.  As you spend more time in a space, you'll first learn the definitions and then eventually have those definitions in working memory.  People having a jargon-filled discussion are not working as hard as you would have to work to keep up - they're just intuitively familiar with the material.
The boundary of expertise is not an edge, it is a gradient.
-You shouldn't give up just because the conventional wisdom says something can't be done, but you should have some pretty compelling reason for why you think the conventional wisdom is wrong.  

23 NOV - Ok, dude.  This is gut-check time.  What you do next will have a big effect on your day.  Deep breaths.  One thing at a time.  First, unfuck your most immediate problem.  Then unfuck the next one.  Every bit of understanding you glean makes your contextual understanding a little bit richer, and that makes tackling the next problem just a little bit easier.  However long it takes, that's how long it takes.  Doing things you have never done is ALWAYS hard.  It is not a reflection of your ability.    


26 JAN - Don't forget, the middle of a race is the hardest part.  All the novelty and energy and easy gains from the beginning are gone, and the end is still nowhere in sight.  All that's left is the slog.  This is where most people quit.  Every day you sit down at your computer and bang out some work is a win, because you are doing something that most people don't.  
2 FEB - Wrapping up a bad day.  However, this is something that happens.  I'm not dumb.  I just haven't gotten a good sleep in a couple days.  This is where most people quit.  Just keep going. 
 
Things I have learned about learning:
    -Context is super important, and a lot of it just comes from spending time in an ecosystem.  Even if you can't point out some specific thing you learned, just spending time and de-mystifying an environment is still useful.
    -Don't chase every mystery.  If you know something works, it's usually best to put a pin in it and find out why later.  You're less likely to be overwhelmed, and you're more likely to understand it later when you've accumulated more general knowledge.
26 MAY-I am in trouble here.  I've had a few bad sessions in a row, and I think it's because I don't have a clearly-defined mid-level goal

17 AUG- I've been working hard on different things for about a year.  For over a year, I've spent virtually every free weekend at my desk developing some ability.  And yet I am still lazy.  I'm afraid that there's no way to ever defeat laziness.  I can use drugs and scheduling and mind tricks to beat it on a given day, but I don't think I'll ever reach a point of just wanting to work.I'll always have to overcome laziness to get anything done.  I do think I have a little more practice with grit.  Even before, I had a decent ability to work when I was getting steady hits of dopamine from seeing action = result.  But grit is the ability to keep going forward when you're not getting rewards.  It's the only way to muddle through frustrating tasks.  And I think I'm doing that in a way that I was not before.  

Being lazy is like eating junk food:  You'll be feeling worse from the consequences long after the temporary pleasure is forgotten.  
25 AUG - Today was a really good day.  Last week I made good progress figuring out OData, and this week I did pretty well wrapping my head around data-binding, more OData, and the neo-app file.  I can't really say for sure, but I have this feeling that I'm getting close to a big jump in my understanding.  I feel like once I've got some useful understanding of factory functions, data-binding, routing, and external data, I'll have a pretty solid base of familiar territory.  There will still be a lot I don't know, and I'll really need to get reps to get mastery, but if I get all of that I think I can build usable apps.  There are still a lot of mysteries out there, but I think once I have that I could make a useful contribution to someone else's projects.




---SECTION OF HAPPY THOUGHTS---
-Think about how much respect you would have if you found out someone else had learned something really hard on their own.  If you met someone with a CS degree who became a professional designer just by learning on their own on the weekends, you would find that person intimidating.  
-Even after a bad day, I don't feel despair.  I don't have that feeling of 'I'll never get this' .  I just want to have a better day next time.  This is new.
You are doing it!  You're sitting down at your computer every weekend and learning.  If past-you had been asked three months ago how you would hope future-you is spending his Thanksgiving holiday, wouldn't this be exactly what you asked for?  And it's all coming together.  You are really building knowledge.  You had a whole conversation with Harrison last night about computer concepts and you were not lost.  
And this approach is really a credit to you.  You're doing the smart thing.  Think about how big of a loss going back to school would have been in terms of cost and lost income.  Even a coding school would cost a lot of cash, plus forgone income while you are in school.  This way costs you almost nothing.  You have spent like $60 on your programming education.  It trains discipline.  And the best part is that there is no sink-or-swim moment.  Just keep applying for jobs and continuing to take Legrand's money until you get a good opportunity.
And you seem really well-suited to this.  You're analytical.  You're a systems-level thinker.  You seek knowledge just because you're curious.  And this is a field that really rewards knowledge and continuous learning.  

18 AUG 2018 - I am at the hardest part of the process.  Learning is slow, there are very few useful resources available to me, and I'm still a long way from being able to build full, working applications.  But I'm still doing it.  I'm still sitting down every weekend and some weekdays and grinding out progress.  I've been working on this much longer than my previous coding attempts, and on much more complicated problems, and I'm still going.  I've settled into a nice, sustainable rhythm.  I'm working every week, I'm advancing my fitness and financial goals, and I'm still making progress.  In fact, I'm sort of peeved when something happens that disrupts my normal weekend rhythm, like a trip or something.  I feel like I could sustain this pace indefinitely.

6 OCT 2018 - woke up this morning feeling like this really might happen.  If I can start creating stuff for Harrison's production application, that would be a huge next step.  I still need to master a few concepts, but I think I'm getting close to the point where I could provide useful work with someone else's oversight.  Once there, the next major hurdle is leaving my job to work as a junior full-time, but once I get that, I'm on my way.  Instead of learning for 10 hours a week, I'll be learning for 40, I'll be around experts, and I'll be getting paid.  I don't know how long it will take me before I'm confident enough to work unsupervised, but that's how I feel about Solidworks.  I know how to build most things, and I know the characteristics of the ones I can't.  If Solidworks were my job, I would never be caught in a situation where I promised something I can't deliver.  And I will get there with programming eventually.  The great thing about this approach is that once I am competent, the most frustrating part will be behind me, not ahead of me.



-There's a real aesthetic pleasure to this.  Enjoy the feel and sound of typing on the Filco keyboard.  Enjoy the look of Inconsolata with your  Monokai theme.

-I really like this keyboard.  Like, REALLY like it.  Dad always used to say "The quality is remembered long after the price is forgotten" and that's definitely true here.