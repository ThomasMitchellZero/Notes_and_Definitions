--what does JSON mean? JSON stands for Javascript Object Notation, and it's just a 
    format for calling out the key:value pairs of an object (much like what the CSV format is to tables)

    name {
    key1: "value1",
    key2: "value2"
    }

--What is V8 and what does it do?  
    V8 is a C++ program that takes Javascript code and translates it into machine code.

--what is Node.js?  
    Node.JS is a C++ program that incorporates V8 and its JS > machine code functionality.  However, it also
    allows you to perform a lot of additional actions that JS does not contain.  For instance, you can just
    type Require into your JS code like it's a built-in method and JS will process it without trouble.

--What is nodemon?   It is a program for node that constantly checks
the source for any changes and then restarts the server automatically.
Using it feels liek any changes you make to the source code are
reflected in the app in real time.  If I add an <h1> to an HTML page,
it appears almost instantly with no need for me to manually restart.

This should be installed as a dev dependency by using the -D suffix
to the NPM CLI install (i.e npm -D nodemon)

AFAICT, when starting a new Node application we need to run   npm init from
the CLI.  It definitely creates the package.json file for me.  Not sure
if it does anything else.


-- Execution Stack:  When Javascript runs, operations in the main code are executed in sequential order.  When a function is encountered, it moves to the top of the execution queue and is resolved first - before the program moves on. If there are nested functions, the most deeply-nested is executed first.  It's just like Magic -last in, first out.

There is also something called the Message Queue in the Javascript engine,
which is where all the events generated by the broswer are stored until
they are processed. 

-- Event Loop:  Definition is kind of fuzzy, but the Event Loop basically monitors both the execution stack and the Message Queue (remember, message queue is just where events generated by the browser chill until they are executed).  As soon as the execution stack is empty (i.e. ALL the synchronous code has executed) the first item in the message queue is executed.

Will the entire program run before a single event from the Message Queue is processed?

Does all Async JS use the message queue?  Is that the definition?

-- Promises:  A promise is an object that determines if an event has happened or not, and what to do if the event has happened.  Before the event has happened the promise is pending.  After it has happened, it is resolved.  

-- Hoisting:  Hoisting occurs in every execution context (spell on the stack) 
After an execution context is stacked but before it is executed, JS runs through
it and makes a couple things available immediately.  Declared functions (but not
function expressions) are available at ANY point in the execution of the context.  
Variables are all also declared, but their values are all set to Undefined
and they aren't re-set to the value the programmer wants until they are reached
during exection of the current execution object. So consider:

var age = 23
function foo(){
    console.log(age);  
    var age = 65;
    console.log(age);
}

foo();

this will log:
Undefined
65

-- Event Bubbling: When an event is triggered on some DOM element, the same event is triggered on ALL the parent elements, up to and including the HTML element.  The element that caused the event to fire is called the 'target element'  The target element is stored as a property of the event object, so all of its parent elements will know which element was the target element of the event.   

--Event Delegation:  Because we know that an an event triggered on a child element will eventually bubble up to its parent, we can attach an event handler to that parent element and just wait for the trigger on the child to bubble up to the parent.

This is useful in two cases.  The first is when we have a lot of child elements that we are interested in.  Instead of having to replicate the event handler over and over, we just attach the event handler to the parent, knowing that we will catch EVERY trigger bubbling up from the children.

The other time it is useful is when we want an event handler for an element that is not yet in the DOM when the page is loaded, like an element added by user input.  By using event delegation (attaching the event handler to a parent that IS in the DOM when loaded) we can catch any events bubbling up from below. 

I think the rule is to attach the event handler to the lowest element that includes EVERYTHING in the DOM upon loading that you want that event to affect.

-- functions:

'Calling' is when you trigger a function yourself.  'Invoking' is when it is triggered by another piece of code.

A parameter is the variable in a function.  An argument is the value you
pass into that parameter when you invoke that function. So:

var function(parameter){};
function(argument);

    ----

function declaration:
function foo(bar){}

function expression:
var foo = function(bar){}

difference between the two is that a function declaration is hoisted (made available
for use before the program is executed) while a function expression is not.  So it 
sounds like I need a pretty good reason to use a function declaration because a
function expression prevents me from executing a function that is declared below 
where that function is called.  It makes the code more readable.

a callback function has two distinguishing characteristics.  First,
it MUST(?) be passed to another function as an argument.  Second,
it is invoked by that other function, not by 

--What is an object? 
    An object is just a set of name-value pairs.  The values can be 
    primitives, or they can be other objects, like methods. In JS
    objects are the contents of curly braces {}

--Maps

Maps are a key-value pair like an object.  But unlike an object, the keys do not have to be strings.  They can be other types of primitives.



What is a method? 
    a method is just a named function that is part of an object.
    Remember that objects are just collections of key:value pairs,
    so 

What is a primitive? - A primitive is a value with no other features.  Things like strings, numbers, 
    and booleans are primitives.  Objects are not.  It might just be anything that doesn't
    contain an operator?  Variables containing primitives actually hold the
    value of those primitives, while variables containing objects do not 
    actually contain those objects.  Instead they contain a reference to the 
    place in memory where the object is stored.


--  Modules:  working definition:

    Used to keep pieces of code that are related to each other inside of distinct, independent, organized units.

    Data encapsulation - storing critical data in methods where it can't 
    be overwritten by other parts of the code.


module.exports =   
     so I just now understood the form of this.  Module is an object.  Exports is a property 
    of that object, specifically a property that makes the value it contains available to the Require method.
    Require takes a parameter (the file path) and returns whatever value has been assigned to 
    the Exports key of the Module object in the JS file it finds there.

Event Listener:
    A name for code that runs in response to the occurance of a particular
    event.  I believe they take the event as one parameter?

--Objects

An object is just a specific collection of properties.  Even an empty object
is still an object. {}  Variables DO NOT store ojects.  Instead they store
the memory location of where that object is defined.  So changing an object,
even in a separate variable, changes it everywhere.



Object Literal: An object you make and populate by hand.  For instance,

var cats = {
    cat1: bubu,
    cat2: Sorin,
};

object constructor = a function that is a template for a new object. When
you call the function in the future, the parameters you pass it will be
assigned to their appropriate keys and values.  This is used if you expect
to make a lot of objects with the same set of properties.

For instance:

function cats(x, y, z){
    this.name = x;
    this.age = y;
    this.color = z;
}




--

const versus var

const means that the variable can't be reassigned.  This acutally 
seems like what I want in most cases, like if I'm requiring an
outside module.  Plus, once it's assigned you just call the name
the same way you would if it were a var.

Something new I discovered.  It is true that a constant cannot be
reassigned.  However, the values it contains can be altered.  

--


.prototype method = 

Old understanding: Normally, you can't make changes to an object constructor
function on the fly. If you want another property, you have to add it into
the constructor function before the code is run.  The .prototype method
allows you to bend that rule.

Something else interesting about prototypes.  If I use the .prototype method to
change an object, such as:  

Walk.prototype.speed = "fast";

All of Walk's child objects will get the property of .speed and the value of
"fast" but Walk itself remains unchanged (I think?)

9.22.8:47pm

Here's my best explanation right now.  Children don't automatically inherit ANYTHING
from their parents.  Only members specified with the .prototype function
are passed on. 

12.22 6:03pm

Newer understanding.  Whenever a method is called, Javascript first checks
the object itself for a method with that name.  If nothing is found,
it then checks at the next level up the prototype chain.  JS repeats this
process until it either finds a match or gets to the Object object.

Anything made by the function constructor will have the
all the properties of the function constructor, even if they are
undefined.  However, that's not always good.  If you have a 500-line 
function, every child will contain the WHOLE function.  You don't want
to be in a situation where every entry has 1k unique characters and 50k
of repeated methods.  Your file size would be insane.

Another problem.  Once something is instantiated, I don't know if changes
to the parent propagate.  IIOW, if I change a method later, do ALL the
children subsequently receive the new method?  If not, it's a true DRY
nightmare.  

Instead, you use the .prototype method.  That makes a function available
to all child objects, but the child objects don't contain a copy.  However,
they can all use the OG definition of the method because it's been
made available via the prototype property.

--

Template literal - a way to concatenate strings in Javascript.  (more needed)
This is a new feature in ES6.  Basically, you use back ticks `` instead of 
'' quotes to enclose a statement and wrap variables in ${} and then you don't
have to do a bunch of plus signs.  Not sure this is better, but here's an example:

var name = "John Doe";
var greet2 = `I shot ${name}`;

--

A name-value pair in an object is called a 'member'

--

Instantiation is when you create an object instance from a class.

--

libuv is a library within Node.JS.  It deals with events coming from
lower levels in the machine, like opening a file.

Lib UV runs something called the Event Loop, in which it is constantly
checking for events from the operating system.  When an event is
detected, it is placed into a queue, and this usually happens when the
event completes.

When the event is complete, libuv runs a callback function.  That function
usually results in Javascript code running in response.

--

An abstract class (also called a base class) is a type of object you 
never work directly with.  You can only inherit from it.

--

Chaining is when a method returns an object that can have another method
called on it right then.  In many cases, the method returns the parent object
which is technically called cascading.  

looks like object.method1().method2().method3();

--

An API is a set of URLs that accept and send data.  Sounds like in the
API model, all of the data-processing is done off-world on the URL host
server.  So a site might an input phrase and give me back the same phrase
in Spanish, but I would have no access to the process by which they did it.

APIs are usually a series of URLs, one for each function.  An individual
URL within an API is called an 'endpoint'.  

APIs give and receive data in multiple formats, and the most popular is
JSON.

--

Serialization - means to convert a JS object into a format that can be
transferred.  JSON and CSV are two examples.  'Deserialization' is the
inverse; it translates the formatted data back into a JS object.

--

GitHub repositories:

Here's an example of the code you run to get link to an online respository

git remote add origin https://github.com/ThomasMitchellZero/Gitty-The-First.git
git push -u origin master.

--HTTP Request

This is a text file generated by the browser that goes to the server
and lets the server know what to send back.  More to come, but it has
a head and a body.

--

HTTP Method:  HTTP is not HTML.  HTTP methods specify the "type" of
request coming from the client (the browser) to the server.  Not to be
confused with a "response" which is when the server talks back to
the client.  

HTTP methods are also called HTTP verbs, and they are things like
GET, POST, DELETE, etc.  The verbs come along with the rest of 
the HTTP request, and the server treats requests differently based on
what type of verb it receives.

For instance, a GET request is asking the server to just send some
information (like an HTML file) while a POST request is telling the
server to incorporate some information coming from the client, like 
the contents of a form.  

One other interesting detail: GET and POST requests can both have queries,
but in a GET the query string is in the head, while in a POST it is in
the body of the req.  Not sure if this is a universal.

POST reqs can also contain JSON objects in the body, not just strings.  
The Content-Type section of the req header is where you specify what
the body of the POST will contain.

--

Middleware is software that intermediates between two layers of
software.   AFAICT, in the case of a Node server, the first layer
is the browser generating the request, the second layer is
the Node application generating the response, and the middleware is 
Express?  If I am correct, Express is taking the incoming stream from
the broswer, changing it, and then passing on that changed version to
the application running in Node.


--

Express:  Not sure exactly what Express is, but it is a framework for
web apps.  It simplifies routing (what to send as a response to a request
for a particular URL)  

Also of note: Express has to be installed separately on the top-level
folder of any new app.

--

Static Files: Files that are not processed by the code in any way.
AFAICT, this means that the files are not changed.  If the client
requests the contents of a text file, I don't process that text file.
I just send it on its way.  

Requests DO NOT automatically connect to files.  I need to specifically
tell the program what to do when a request for a file comes in.

--

Template Engines: these are utilities for Express that take text and
translate it into the HTML that will be delivered to the client via
the server response.  Once you have installed your template engine 
(EJS in this case) you can create individual web pages as .ejs files
rather than .html files.  EJS (or whatever template engine you are using)
will then translate your EJS file into an HTML file before sending it 
as a response.

--

REST - Stands for REpresentational State Transfer, and it is an 
architectural style for building APIs.  I don't really get this one
because I don't know enough about the alternatives, but the gist
seems to be that you structure your API in such a way that the 
different HTTP verbs correspond to the function you are performing.

Each request from client to server must contain  all the information
necessary to understand that request, and can't use any stored context on 
the server.  

For instance, I think POST does everything that GET does.  Even if a page
has no interaction whatsoever, you can still render it with POST.  
But because GET exists to handle non-interactive HTTP requests, you're 
not being RESTful if you use POST instead. 

Is this bad for any reason other than legibility?  

-- Closures

A closure is an inner fuction that has access to the variables and parameters (or arguments?) of its outer function, even if that outer function has already returned.  This is common in situations where a function is returning another function.  AFAICT there's no special syntax.  


--

///  DATABASES ///

-- Relational databases:  AFAICT, the best way to make a relational database
is to have EVERYTHING have a unique identifier and a value.  So you have a 
table of key:name pairs, a table of key: address pairs, and a table of
key:email pairs.  The actual tables, called Relational Databases,  used are 
then assembled from links to the relevant keys.  This way, there is only every
a single source of truth for each value.  Changing an email on the main table
changes it everywhere.  Data that does not repeat itself unnecessarily is 
called "well-normalized".

The advantage of doing it this way is that you don't need an entry for every
key-value pair.  If there's no entry for person.height, you just get back
"Undefined".  (but is this really a problem with tables?) 

+ How do objects allow you to change data structures on the fly in a way
that tables do not?  

Data model - the structure of the database.  If you have three tables and
each table has ten fields, that is your record.

--
What are Promises and how do they work?

--

Postman is a desktop application that allows you to simulate requests to a
server.  You can send different types, like GET or POST.  AFAICT this allows
us to see if an API is working without having to actually build the front-end  
first.

--

Encryption and hashing.  Encryption is used when a message needs to be encoded
and then decoded again.  Hashing is used when the message
never needs to be decoded, which is perfect for passwords.

Here's the situation.  Many users use the same name and password.  If your DB is
breached and passwords are stored in the clear, hackers could then use that info
to get into all your other websites.

Hashing solves this problem.  Hashing is an algorithm that takes a given input
and turns it into a string of gibberish, with two key features.  First, as long
as the input is the same, the algorithm will always generate the same string
of gibberish.  Second, there's no systematic way to guess the input from the 
output, even if you know what the hashing algorithm is.

It's made even more difficult by salt.  Salting adds some random characters
to your input to make it even harder to guess from the outside.

So when you enter your password for the first time, it gets hashed and the
gibberish is stored on the site's server.  Any time you go to log in, your
password is passed to the same algorithm, and it outputs the same string
of gibberish it did the last time.  THAT is what is compared to the gibberish
string in the database.  If hackers crack the database, they'll have access
to your gibberish string (and your account on that site) but because they have
no way of guessing the input that generated it, they can't get into any other
accounts.

--

Separation of Concerns: Each distinct group in an app is composed of operations that only talk to each other and to the level above them.  There should be no cross-talk between separate sections.  If you have this, the sections shouldn't be separate.  The idea is that you should be able to eliminate a section and everything horizontal to it should be unaffected.

--

-Private vs. Public: I think public just means things that are accessible from the global scope and private means things that are not.

--
-Promise.  I don't know much about it but it seems to be important.  

What exactly is a DOM?-

Still don't know!  AFAICT, the DOM is created by the browser.  It is not
part of Javascript (although some online alluded that this might be coming)
Instead, it's a translation of the HTML code into an object-oriented 
representation.  This means it is useable by other programs that can manipulate
objects (So not just Javascript!)

By modeling the document as an object, it enables the page to be changed by
scripts. 



--DOM refers to the hierarchical structure of HTML code.  
 <body>
    <section>
        <div>
            <p></p>
            <p></p>
            <p></p>
        </div>  
    </section>
 </body>

